generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  admin         Boolean     @default(false)
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  barbershop    BarberShop? @relation("UserBarbershop")
}

//GOOGLE PROVIDER
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

//GOOGLE PROVIDER
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//GOOGLE PROVIDER
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model BarberShop {
  id          String              @id @default(cuid())
  name        String
  address     String
  phones      String[]
  description String
  imageUrl    String
  isPremium   Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  services    BarbershopService[]
  Booking     Booking[]
  instagram   String?
  facebook    String?
  tiktok      String?

  // RELAÇÃO COM USER (ADMIN)
  ownerId String? @unique
  owner   User?   @relation("UserBarbershop", fields: [ownerId], references: [id])
}

model BarbershopService {
  id           String     @id @default(cuid())
  name         String
  description  String
  imageUrl     String
  price        Decimal    @db.Decimal(10, 2)
  duration     Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  barberShopId String
  barberShop   BarberShop @relation(fields: [barberShopId], references: [id])
  Booking      Booking[]
}

model Booking {
  id           String            @id @default(cuid())
  serviceId    String
  service      BarbershopService @relation(fields: [serviceId], references: [id])
  userId       String
  user         User              @relation(fields: [userId], references: [id])
  date         DateTime
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  BarberShop   BarberShop?       @relation(fields: [barberShopId], references: [id])
  barberShopId String?
}
